import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from logic import CareerAdvisor
from config import BOT_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–º–æ—â–Ω–∏–∫–æ–≤
career_advisor = CareerAdvisor("career_advisor.db")

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class Form(StatesGroup):
    waiting_skills = State()
    waiting_interests = State()
    waiting_experience = State()
    waiting_profession = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_menu() -> ReplyKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    buttons = [
        [KeyboardButton(text="üéØ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")],
        [KeyboardButton(text="üìä –û—Ü–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é")],
        [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_experience_levels() -> ReplyKeyboardMarkup:
    """–í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –æ–ø—ã—Ç–∞"""
    buttons = [
        [KeyboardButton(text="üöÄ –ù–µ—Ç –æ–ø—ã—Ç–∞")],
        [KeyboardButton(text="üõ† –ú–µ–Ω–µ–µ 1 –≥–æ–¥–∞")],
        [KeyboardButton(text="‚öôÔ∏è 1-3 –≥–æ–¥–∞")],
        [KeyboardButton(text="üèÜ –ë–æ–ª–µ–µ 3 –ª–µ—Ç")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_back_button() -> ReplyKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞!\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.",
        reply_markup=get_main_menu()
    )

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
@dp.message(F.text == "üéØ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
async def start_recommendations(message: Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
        "–ü—Ä–∏–º–µ—Ä: Python, —Ä–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ, –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ",
        reply_markup=get_back_button()
    )
    await state.set_state(Form.waiting_skills)

@dp.message(Form.waiting_skills)
async def process_skills(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
        return
    
    skills = [s.strip() for s in message.text.split(",") if s.strip()]
    if not skills:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–∞–≤—ã–∫")
        return
    
    await state.update_data(skills=skills)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
        "–ü—Ä–∏–º–µ—Ä: –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –¥–∏–∑–∞–π–Ω, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥",
        reply_markup=get_back_button()
    )
    await state.set_state(Form.waiting_interests)

@dp.message(Form.waiting_interests)
async def process_interests(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–≤—ã–∫–∏ –∑–∞–Ω–æ–≤–æ:", reply_markup=get_back_button())
        await state.set_state(Form.waiting_skills)
        return
    
    interests = [i.strip() for i in message.text.split(",") if i.strip()]
    if not interests:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å")
        return
    
    await state.update_data(interests=interests)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞:",
        reply_markup=get_experience_levels()
    )
    await state.set_state(Form.waiting_experience)

@dp.message(Form.waiting_experience)
async def process_experience(message: Message, state: FSMContext):
    valid_experience = ["üöÄ –ù–µ—Ç –æ–ø—ã—Ç–∞", "üõ† –ú–µ–Ω–µ–µ 1 –≥–æ–¥–∞", "‚öôÔ∏è 1-3 –≥–æ–¥–∞", "üèÜ –ë–æ–ª–µ–µ 3 –ª–µ—Ç"]
    
    if message.text not in valid_experience:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∏–∂–µ")
        return
    
    user_data = await state.get_data()
    experience_map = {
        "üöÄ –ù–µ—Ç –æ–ø—ã—Ç–∞": "–ù–µ—Ç –æ–ø—ã—Ç–∞",
        "üõ† –ú–µ–Ω–µ–µ 1 –≥–æ–¥–∞": "–ú–µ–Ω–µ–µ 1 –≥–æ–¥–∞",
        "‚öôÔ∏è 1-3 –≥–æ–¥–∞": "1-3 –≥–æ–¥–∞",
        "üèÜ –ë–æ–ª–µ–µ 3 –ª–µ—Ç": "–ë–æ–ª–µ–µ 3 –ª–µ—Ç"
    }
    
    try:
        response = await career_advisor.get_ai_recommendations(
            skills=user_data['skills'],
            interests=user_data['interests'],
            experience=experience_map[message.text]
        )
        await message.answer(response[:4000], reply_markup=get_main_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu())
    finally:
        await state.clear()

# –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
@dp.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π")
async def show_professions(message: Message):
    professions = career_advisor.get_all_professions()
    response = "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏:\n\n" + "\n".join(
        f"‚Ä¢ {p['name']}: {p['description']}" for p in professions[:15]
    )
    await message.answer(response, reply_markup=get_main_menu())

# –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
@dp.message(F.text == "üìä –û—Ü–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é")
async def start_evaluation(message: Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏:",
        reply_markup=get_back_button()
    )
    await state.set_state(Form.waiting_profession)

@dp.message(Form.waiting_profession)
async def evaluate_profession_step1(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
        return
    
    await state.update_data(profession=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
        reply_markup=get_back_button()
    )
    await state.set_state(Form.waiting_skills)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
    finally:
        await career_advisor.close()

if __name__ == "__main__":
    asyncio.run(main())