import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.client.default import DefaultBotProperties
from database import Database
from ai_helper import AIHelper
from config import BOT_TOKEN

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode='HTML'))
dp = Dispatcher()
db = Database()
ai_helper = AIHelper()

class Form(StatesGroup):
    waiting_skills = State()
    waiting_interests = State()
    waiting_experience = State()

def get_main_menu() -> ReplyKeyboardMarkup:
    buttons = [
        [KeyboardButton(text="üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º")],
        [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")],
        
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_experience_keyboard() -> ReplyKeyboardMarkup:
    buttons = [
        [KeyboardButton(text="üöÄ –ù–µ—Ç –æ–ø—ã—Ç–∞")],
        [KeyboardButton(text="üõ† 1-3 –≥–æ–¥–∞ –æ–ø—ã—Ç–∞")],
        [KeyboardButton(text="‚ö° 3+ –≥–æ–¥–∞ –æ–ø—ã—Ç–∞")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_back_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True)

@dp.message(Command("start"))
async def start_command(message: Message):
    db.add_user(
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞!\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.",
        reply_markup=get_main_menu()
    )

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

@dp.message(F.text == "üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º")
async def start_recommendations(message: Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
        "–ü—Ä–∏–º–µ—Ä: Python, —Ä–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ, –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ",
        reply_markup=get_back_keyboard()
    )
    await state.set_state(Form.waiting_skills)

@dp.message(Form.waiting_skills)
async def process_skills(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
        return
    
    skills = [s.strip() for s in message.text.split(",") if s.strip()]
    if not skills:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–∞–≤—ã–∫")
        return
    
    await state.update_data(skills=skills)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
        "–ü—Ä–∏–º–µ—Ä: –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –¥–∏–∑–∞–π–Ω, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥",
        reply_markup=get_back_keyboard()
    )
    await state.set_state(Form.waiting_interests)

@dp.message(Form.waiting_interests)
async def process_interests(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.set_state(Form.waiting_skills)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–≤—ã–∫–∏ –∑–∞–Ω–æ–≤–æ:", reply_markup=get_back_keyboard())
        return
    
    interests = [i.strip() for i in message.text.split(",") if i.strip()]
    if not interests:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å")
        return
    
    await state.update_data(interests=interests)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞:",
        reply_markup=get_experience_keyboard()
    )
    await state.set_state(Form.waiting_experience)

@dp.message(Form.waiting_experience)
async def process_experience(message: Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.set_state(Form.waiting_interests)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∑–∞–Ω–æ–≤–æ:", reply_markup=get_back_keyboard())
        return
    
    experience_map = {
        "üöÄ –ù–µ—Ç –æ–ø—ã—Ç–∞": "–ù–µ—Ç –æ–ø—ã—Ç–∞",
        "üõ† 1-3 –≥–æ–¥–∞ –æ–ø—ã—Ç–∞": "1-3 –≥–æ–¥–∞",
        "‚ö° 3+ –≥–æ–¥–∞ –æ–ø—ã—Ç–∞": "3+ –≥–æ–¥–∞"
    }
    experience = experience_map.get(message.text, message.text)
    
    user_data = await state.get_data()
    try:
        response = await ai_helper.get_recommendations(
            skills=user_data['skills'],
            interests=user_data['interests'],
            experience=experience
        )
        await message.answer(response, reply_markup=get_main_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer(
            "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –Ω–∞–≤—ã–∫–∏/–∏–Ω—Ç–µ—Ä–µ—Å—ã.",
            reply_markup=get_main_menu()
        )
    finally:
        await state.clear()

@dp.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
async def show_categories(message: Message):
    categories = await ai_helper.get_categories()
    response = "üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π:\n\n" + "\n".join(f"‚Ä¢ {cat}" for cat in categories)
    await message.answer(response)

async def main():
    try:
        await dp.start_polling(bot)
    finally:
        db.close()
        await ai_helper.close()

if __name__ == "__main__":
    asyncio.run(main())